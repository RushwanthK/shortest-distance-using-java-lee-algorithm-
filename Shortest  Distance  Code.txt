Steps to be done before executing the program:

1. open eclipse and click on help in navigation bar
2. click on install new softwares
3. pop up box appears and then click on add 
4. copy this url:  http://www.mihai-nita.net/eclipse   in both boxes and click on add
5. tick mark both checkboxes and then click on next
6. Click on next again
7. tick the I ACCEPT checkbox and click on finish
8. After the installation is complete click on restart now button 
9. Now the copy paste the program and execute it
10. For any doubts refer this youtube link:  https://www.youtube.com/watch?v=IzYCYXfVTF8



CODE 

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
class node
{
    int x, y, distance;

    node(int x, int y, int dist)
    {
        this.x = x;
        this.y = y;
        this.distance = dist;
    }
}
enum Color 
{
    //Color end string, color reset
    RESET("\033[0m"),

    // Regular Colors. Normal color, no bold, background color etc.
    BLACK("\033[0;30m"),    // BLACK
    RED("\033[0;31m"),      // RED
    GREEN("\033[0;32m"),    // GREEN
    YELLOW("\033[0;33m"),   // YELLOW
    BLUE("\033[0;34m"),     // BLUE
    MAGENTA("\033[0;35m"),  // MAGENTA
    CYAN("\033[0;36m"),     // CYAN
    WHITE("\033[0;37m"),    // WHITE

    // Bold
    BLACK_BOLD("\033[1;30m"),   // BLACK
    RED_BOLD("\033[1;31m"),     // RED
    GREEN_BOLD("\033[1;32m"),   // GREEN
    YELLOW_BOLD("\033[1;33m"),  // YELLOW
    BLUE_BOLD("\033[1;34m"),    // BLUE
    MAGENTA_BOLD("\033[1;35m"), // MAGENTA
    CYAN_BOLD("\033[1;36m"),    // CYAN
    WHITE_BOLD("\033[1;37m"),   // WHITE

    // Underline
    BLACK_UNDERLINED("\033[4;30m"),     // BLACK
    RED_UNDERLINED("\033[4;31m"),       // RED
    GREEN_UNDERLINED("\033[4;32m"),     // GREEN
    YELLOW_UNDERLINED("\033[4;33m"),    // YELLOW
    BLUE_UNDERLINED("\033[4;34m"),      // BLUE
    MAGENTA_UNDERLINED("\033[4;35m"),   // MAGENTA
    CYAN_UNDERLINED("\033[4;36m"),      // CYAN
    WHITE_UNDERLINED("\033[4;37m"),     // WHITE

    // Background
    BLACK_BACKGROUND("\033[40m"),   // BLACK
    RED_BACKGROUND("\033[41m"),     // RED
    GREEN_BACKGROUND("\033[42m"),   // GREEN
    YELLOW_BACKGROUND("\033[43m"),  // YELLOW
    BLUE_BACKGROUND("\033[44m"),    // BLUE
    MAGENTA_BACKGROUND("\033[45m"), // MAGENTA
    CYAN_BACKGROUND("\033[46m"),    // CYAN
    WHITE_BACKGROUND("\033[47m"),   // WHITE

    // High Intensity
    BLACK_BRIGHT("\033[0;90m"),     // BLACK
    RED_BRIGHT("\033[0;91m"),       // RED
    GREEN_BRIGHT("\033[0;92m"),     // GREEN
    YELLOW_BRIGHT("\033[0;93m"),    // YELLOW
    BLUE_BRIGHT("\033[0;94m"),      // BLUE
    MAGENTA_BRIGHT("\033[0;95m"),   // MAGENTA
    CYAN_BRIGHT("\033[0;96m"),      // CYAN
    WHITE_BRIGHT("\033[0;97m"),     // WHITE

    // Bold High Intensity
    BLACK_BOLD_BRIGHT("\033[1;90m"),    // BLACK
    RED_BOLD_BRIGHT("\033[1;91m"),      // RED
    GREEN_BOLD_BRIGHT("\033[1;92m"),    // GREEN
    YELLOW_BOLD_BRIGHT("\033[1;93m"),   // YELLOW
    BLUE_BOLD_BRIGHT("\033[1;94m"),     // BLUE
    MAGENTA_BOLD_BRIGHT("\033[1;95m"),  // MAGENTA
    CYAN_BOLD_BRIGHT("\033[1;96m"),     // CYAN
    WHITE_BOLD_BRIGHT("\033[1;97m"),    // WHITE

    // High Intensity backgrounds
    BLACK_BACKGROUND_BRIGHT("\033[0;100m"),     // BLACK
    RED_BACKGROUND_BRIGHT("\033[0;101m"),       // RED
    GREEN_BACKGROUND_BRIGHT("\033[0;102m"),     // GREEN
    YELLOW_BACKGROUND_BRIGHT("\033[0;103m"),    // YELLOW
    BLUE_BACKGROUND_BRIGHT("\033[0;104m"),      // BLUE
    MAGENTA_BACKGROUND_BRIGHT("\033[0;105m"),   // MAGENTA
    CYAN_BACKGROUND_BRIGHT("\033[0;106m"),      // CYAN
    WHITE_BACKGROUND_BRIGHT("\033[0;107m");     // WHITE

    private final String code;

    Color(String code) {
        this.code = code;
    }

    @Override
    public String toString() {
        return code;
    }
}
public class lee
{
    static int M = 12;
    static int N = 12;
    static int[][] MATRIX =
    	{
    			{0,1,1,1,1,1,1,0,0,0,0,1},
    			{0,1,0,0,0,0,1,1,1,1,0,1},
    			{1,1,1,0,0,0,0,0,0,1,0,1},
    			{1,0,1,0,1,1,1,1,0,1,0,1},
    			{1,0,1,0,0,0,0,0,0,1,0,1},
    			{1,0,1,1,1,1,1,0,0,1,0,1},
    			{1,0,0,0,0,0,1,0,0,1,0,0},
    			{1,0,1,1,0,0,1,0,0,1,1,0},
    			{1,0,1,0,1,1,1,0,1,0,1,0},
    			{1,0,0,0,1,0,0,0,0,0,1,0},
    			{1,1,1,1,1,1,1,1,1,1,1,0},
    			{0,0,0,0,0,0,0,0,0,0,0,0} };
    static boolean isValid(int mat[][], int visited[][], int row, int col)
    {
        return ((row >= 0) && (row < M)) && ((col >= 0) && (col < N)) && (mat[row][col] == 1) && (visited[row][col]!=1);
    }
    
    public static void display(int m[][],int v[][],int m_d,int i,int j,int x,int y)
    {
        for(int r=0;r<12;r++)
        {
        	for(int s=0;s<12;s++)
        	{
        		if(v[r][s]==1) 
        		{
        		m[r][s]=8;
        		}
        	}	
        }
        
        if (m_d == Integer.MAX_VALUE)
        {
            System.out.print("Destination cannot be reached\n\n");
        }
        else
        {
        	System.out.println(Color.BLUE_BRIGHT);
            System.out.print("\nThe shortest path has length = " + (m_d-1)+ "\n\n");
            System.out.println(Color.RESET);
        }
    	for(int r=0;r<12;r++)
        {
        	for(int s=0;s<12;s++)
        	{
        		if(r==i&&s==j)
        		{
            		System.out.print(Color.YELLOW);
                    System.out.print(Color.GREEN_BACKGROUND);
            			System.out.print(m[r][s]+ "  ");
                    System.out.print(Color.RESET);        			
        		}
        	    else if(r==x&&s==y)
        	    {
            		System.out.print(Color.WHITE);
                    System.out.print(Color.RED_BACKGROUND);
            			System.out.print(m[r][s]+ "  ");
                    System.out.print(Color.RESET);        	    	
        	    }
        	    else if(m[r][s]==8)
        		{
        		System.out.print(Color.BLACK);
                System.out.print(Color.YELLOW_BACKGROUND);
        			System.out.print(m[r][s]+ "  ");
                System.out.print(Color.RESET);
        		}

        		else
        		{
        			System.out.print(m[r][s]+ "  ");
        		}
        	}
        	System.out.println();
        }
        System.out.println("\n");
        for(int r=0;r<12;r++)
        {
        	for(int s=0;s<12;s++)
        	{
        		if(v[r][s]==1) 
        		{
        		m[r][s]=1;
        		}
        	}	
        }
    }
    
    public static void bfs(int matrix[][], int i, int j, int x, int y)
    {
        int row[] =
        { -1, 0, 0, 1 };
        int col[] =
        { 0, -1, 1, 0 };
        int st1=i;
        int st2=j;
        int[][] visited = new int[M][N];
        Queue<node> q = new LinkedList<node>();
        visited[i][j] = 1;
        q.add(new node(i, j, 0));
        int minimum_distance = Integer.MAX_VALUE;
        while (!q.isEmpty())
        {
            node node = q.poll();
            i = node.x;
            j = node.y;
            int dist = node.distance;
            if (i == x && j == y)
            {
                minimum_distance = dist;
                break;
            }

            for (int k = 0; k < 4; k++)
            {
                if (isValid(matrix, visited, i + row[k], j + col[k]))
                {
                    visited[i + row[k]][j + col[k]] = 1;
                    node n = new node(i + row[k], j + col[k], dist + 1);
                    q.add(n);
                }
            }
        }
        display(matrix,visited,minimum_distance,st1,st2,x,y);        
    }

    public static void main(String[] args)
    {
    	Scanner sc=new Scanner(System.in);
    	String st,ed;
    	String ch="Y";
        int[][] matrix=MATRIX;
        
        System.out.print(Color.RED_BOLD);
        System.out.println("\n\t\t\t\t\t\t\t\t\t\t  Mini Map of 0's & 1's");
        System.out.print(Color.RESET);
        System.out.print(Color.RED_UNDERLINED);
        System.out.println("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ");
        System.out.print(Color.RESET);
        System.out.println("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Map description\n");
        System.out.println("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  1 means No wall");
        System.out.println("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  0 means wall\n");
        System.out.println("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Green = Starting point"); 
        System.out.println("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Red = Destination\n");
        while(ch.equalsIgnoreCase("Y"))
        {
        	System.out.print(Color.MAGENTA_BOLD);
        System.out.println("\n0's & 1's map : \n");
        System.out.print(Color.RESET);
        for(int i=0;i<12;i++)
        {
        	for(int j=0;j<12;j++)
        	{
        		
        		if(i==2&&j==1)
        		{
            		System.out.print(Color.WHITE);
                    System.out.print(Color.BLUE_BACKGROUND);
            			System.out.print("A  ");
                    System.out.print(Color.RESET);        			
        		}
        	    else if(i==10&&j==4)
        	    {
            		System.out.print(Color.WHITE);
                    System.out.print(Color.BLUE_BACKGROUND);
            			System.out.print("B  ");
                    System.out.print(Color.RESET);        	    	
        	    }
        	    else if(i==5&&j==6)
        	    {
            		System.out.print(Color.WHITE);
                    System.out.print(Color.BLUE_BACKGROUND);
            			System.out.print("C  ");
                    System.out.print(Color.RESET);        	    	
        	    }
        	    else if(i==7&&j==10)
        	    {
            		System.out.print(Color.WHITE);
                    System.out.print(Color.BLUE_BACKGROUND);
            			System.out.print("D  ");
                    System.out.print(Color.RESET);        	    	
        	    }
        		else
        		{
        			System.out.print(matrix[i][j]+ "  ");
        		}
        	}
        	System.out.println();
        }
        System.out.println();
        System.out.println("Enter starting location");
        st=sc.next();
        System.out.println("Enter Destination");
        ed=sc.next();
        if(st.equalsIgnoreCase("A")&&ed.equalsIgnoreCase("B"))
        {
        	bfs(matrix, 2, 1, 10, 4);
        }
        else if(st.equalsIgnoreCase("A")&&ed.equalsIgnoreCase("C"))
        {
        	bfs(matrix, 2, 1, 5, 6);
        }
        else if(st.equalsIgnoreCase("A")&&ed.equalsIgnoreCase("D"))
        {
        	bfs(matrix, 2, 1, 7, 10);
        }
        else if(st.equalsIgnoreCase("B")&&ed.equalsIgnoreCase("A"))
        {
        	bfs(matrix, 10, 4, 2, 1);
        }
        else if(st.equalsIgnoreCase("B")&&ed.equalsIgnoreCase("C"))
        {
        	bfs(matrix, 10, 4, 5, 6);
        }
        else if(st.equalsIgnoreCase("B")&&ed.equalsIgnoreCase("D"))
        {
        	bfs(matrix, 10, 4, 7, 10);
        }
        else if(st.equalsIgnoreCase("C")&&ed.equalsIgnoreCase("A"))
        {
        	bfs(matrix, 5, 6, 2, 1);
        }
        else if(st.equalsIgnoreCase("C")&&ed.equalsIgnoreCase("B"))
        {
        	bfs(matrix, 5, 6, 10, 4);
        }
        else if(st.equalsIgnoreCase("C")&&ed.equalsIgnoreCase("D"))
        {
        	bfs(matrix, 5, 6, 7, 10);
        }
        else if(st.equalsIgnoreCase("D")&&ed.equalsIgnoreCase("A"))
        {
        	bfs(matrix, 7, 10, 2, 1);
        }
        else if(st.equalsIgnoreCase("D")&&ed.equalsIgnoreCase("B"))
        {
        	bfs(matrix, 7, 10, 10, 4);
        }
        else if(st.equalsIgnoreCase("D")&&ed.equalsIgnoreCase("C"))
        {
        	bfs(matrix, 7, 10, 5, 6);
        }
        else 
        {
        	System.out.println(Color.CYAN_BOLD);
        	System.out.println("\nNo such location or Path");
        	System.out.println(Color.RESET);
        }
        	
        System.out.println(Color.YELLOW_BOLD);
        System.out.println("\nDo you want to continue Y/N:");
        System.out.println(Color.RESET);
        ch=sc.next();
        }
        System.out.println(Color.RED_BOLD);
        System.out.println("\nExited from Maps ");
        System.out.println(Color.RESET);
        System.out.println("\t\t\t\t\t\t\t\t\t\t\t\t******");
    sc.close();
    }
}